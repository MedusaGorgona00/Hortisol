<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IllinoisLargePackage" xml:space="preserve">
    <value>with report as (
	select
		shipping_county_id as county_id,
		product_id,
		grade as grade_id,
		total_weight as weight,
		product_qty as quantity
	from public.account_invoice_out_report
	where country_id = 235
          and "date" between {0} and {1}
          and shipping_state_id = 14
          and main_categ_id in (7, 11)
          and total_weight &gt; 0
          and product_weight &gt; 5
),
counties as (
	select
		id as county_id,
		"name" as county
	from public.res_country_county
),
grades as (
	select
		id as grade_id,
		grade
	from public.fertilizer_grade
)
select
	substring(coalesce(c.grade, g.grade), '^\d+[\d.]*')::numeric    as n,
	substring(coalesce(c.grade, g.grade), '-(\d+[\d.]*)-')::numeric as p,
	substring(coalesce(c.grade, g.grade), '\d+[\d.]*$')::numeric    as k,
	county,
	round(sum(coalesce(r.quantity * c.component_weight, r.weight)) / 2000, 3) as weight
from report as r
left join public.product_combo as c on r.product_id = c.id
left join grades as g using(grade_id)
left join counties using(county_id)
group by grouping sets ((county, n, p, k), ())
order by county, n, p, k</value>
  </data>
  <data name="IllinoisSmallPackage" xml:space="preserve">
    <value>with report as (
	select
		shipping_county_id as county_id,
		product_id,
		grade as grade_id,
		total_weight as weight,
		product_qty as quantity
	from public.account_invoice_out_report
	where country_id = 235
          and "date" between {0} and {1}
          and shipping_state_id = 14
          and main_categ_id in (7, 11)
          and total_weight &gt; 0
          and product_weight &lt;= 5
),
counties as (
	select
		id as county_id,
		"name" as county
	from public.res_country_county
),
products as (
	select
		id as product_id,
		regexp_replace(trim(substring(name_template, '^[^–]+')), '\s+', ' ') as product_name
	from public.product_product
),
grades as (
	select
		id as grade_id,
		grade
	from public.fertilizer_grade
)
select
	upper(coalesce(c.product_name, p.product_name)) || ' (' || coalesce(c.grade, g.grade) || ')' as product,
	county,
	round(sum(coalesce(r.quantity * c.component_weight, r.weight)) / 2000, 3) as weight
from report as r
left join counties using(county_id)
left join products as p using(product_id)
left join public.product_combo as c on r.product_id = c.id
left join grades as g using(grade_id)
group by grouping sets ((county, product), ())
order by county, product;</value>
  </data>
  <data name="WashingtonByCompany" xml:space="preserve">
    <value>SELECT 
    trim(substring(par.commercial_company_name, '^[^-]+')) as company,
    par.city,
    SUM(rep.total_weight), 
    ROUND(SUM(rep.total_weight) / 2000, 2) as ustonns
FROM public.account_invoice_out_report AS rep
LEFT JOIN public.fertilizer_grade AS gr
    ON rep.grade = gr.id
LEFT JOIN public.res_partner AS par
    ON rep.partner_shipping_id = par.id
WHERE
    rep.country_id = 235 
    AND rep.date BETWEEN {0} AND {1}
    AND rep.shipping_state_id = 48
    AND rep.main_categ_id IN (7, 11)
    --and total_weight &gt; 0
GROUP by
    1,
    par.city
ORDER BY company, par.city</value>
  </data>
  <data name="WashingtonByGrade" xml:space="preserve">
    <value>SELECT gr.grade, ROUND(SUM(rep.total_weight) / 2000, 2) , SUM(rep.total_weight) / 2000 as Num
FROM public.account_invoice_out_report AS rep
LEFT JOIN public.fertilizer_grade AS gr
    ON rep.grade = gr.id
WHERE
  rep.country_id = 235
  AND rep.date BETWEEN {0} AND {1}
  AND rep.shipping_state_id = 48
  AND rep.main_categ_id IN (7, 11)
GROUP BY 
  gr.grade
HAVING SUM(rep.total_weight) &gt; 0</value>
  </data>
  <data name="WashingtonTotal" xml:space="preserve">
    <value>SELECT ROUND(SUM(rep.total_weight) / 2000, 2) , SUM(rep.total_weight) / 2000 as Num
FROM public.account_invoice_out_report AS rep
LEFT JOIN public.fertilizer_grade AS gr
    ON rep.grade = gr.id
WHERE
  rep.country_id = 235  
  AND rep.date BETWEEN {0} AND {1}
  AND rep.shipping_state_id = 48
  AND rep.main_categ_id IN (7, 11)</value>
  </data>
</root>